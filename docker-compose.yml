version: '3.8'

services:
  # MongoDB Database
  # mongodb:
  #   image: mongo:7.0
  #   container_name: video-surfing-mongodb
  #   restart: unless-stopped
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
  #     MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-video-surfing}
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongodb_data:/data/db
  #     - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
  #   networks:
  #     - video-surfing-network
  #   healthcheck:
  #     test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # Backend API
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: video-surfing-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5001
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DB_NAME:-video-surfing}?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-90d}
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - video-surfing-network
    # healthcheck:
    #   test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
        REACT_APP_DEFAULT_THUMBNAIL: ${REACT_APP_DEFAULT_THUMBNAIL:-https://via.placeholder.com/640x360}
    container_name: video-surfing-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - video-surfing-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: video-surfing-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - video-surfing-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local

networks:
  video-surfing-network:
    driver: bridge